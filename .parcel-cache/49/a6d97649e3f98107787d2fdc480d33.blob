var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "state", function () {
  return state;
});
_parcelHelpers.export(exports, "loadSearchResults", function () {
  return loadSearchResults;
});
_parcelHelpers.export(exports, "loadRecipe", function () {
  return loadRecipe;
});
_parcelHelpers.export(exports, "addBookmark", function () {
  return addBookmark;
});
_parcelHelpers.export(exports, "deleteBookmark", function () {
  return deleteBookmark;
});
_parcelHelpers.export(exports, "getSearchResultsPage", function () {
  return getSearchResultsPage;
});
require('regenerator-runtime');
var _configJs = require('./config.js');
var _helpersJs = require('./helpers.js');
const state = {
  recipe: {},
  search: {
    query: '',
    // what the user searched
    results: [],
    page: 1,
    // set page number to 1 by default
    resultsPerPage: 10
  },
  bookmarks: [],
  // ID's only
  bookmarkID: []
};
const loadSearchResults = async function (searchFieldInput) {
  // MAIN OBJECTIVE: Change state object with your search results
  try {
    state.search.page = 1;
    // reset page to 1 after every search
    state.search.query = searchFieldInput;
    // $ update state obj
    // Scan API for your search query
    // fetchAPI returns an array of objects containing ID's recipe titles, images...etc
    const searchResults = await _helpersJs.getJSON(`https://forkify-api.herokuapp.com/api/search?q=${searchFieldInput}`);
    const {recipes} = searchResults;
    const reformattedResults = recipes.map(rec => {
      return {
        id: rec.recipe_id,
        title: rec.title,
        publisher: rec.publisher,
        sourceUrl: rec.source_url,
        image: rec.image_url
      };
    });
    state.search.results = reformattedResults;
  } catch (err) {
    throw err;
  }
};
const loadRecipe = async function (id) {
  // this function only changes the state object (DN return anything)
  try {
    // Store resolved fetchAPI promise value from getJSON() into "data"
    const data = await _helpersJs.getJSON(`${_configJs.API_URL}${id}`);
    console.log(`${_configJs.API_URL}${id}`);
    // link to the JSON data
    // Reformat the info captured from our fetch request so the names are simpler
    const {recipe} = data;
    state.recipe = {
      id: recipe.recipe_id,
      title: recipe.title,
      publisher: recipe.publisher,
      sourceUrl: recipe.source_url,
      image: recipe.image_url,
      ingredients: recipe.ingredients
    };
    // # Keep the bookmark active even after viewing a new recipe
    // HOW: Check if the state object's bookmark array contains the ID of the recipe you supply this function
    // Set the "bookmarked" KVP equal to true or false accordingly
    if (state.bookmarks.includes(id)) state.recipe.bookmarked = true; else state.recipe.bookmarked = false;
  } catch (err) {
    throw err;
  }
};
const addBookmark = function (recipe) {
  // Add recipe ID to the state object's bookmark list/array
  state.bookmarks.push(recipe);
  state.bookmarkID.push(recipe.id);
  // Mark current recipe as bookmarked (adds white to the bookmark icon)
  state.recipe.bookmarked = true;
  console.log('state post deletion', state);
};
const deleteBookmark = function (recipe) {
  // Remove recipe ID from the state object's bookmark list/array
  // # Find index of the bookmarks array that contains id:
  const ind = state.bookmarkID.indexOf(recipe.id);
  state.bookmarks.splice(ind, 1);
  state.bookmarkID.splice(ind, 1);
  // Mark current recipe as NOT bookmarked (removes white to the bookmark icon)
  state.recipe.bookmarked = false;
  console.log('state post deletion', state);
};
const getSearchResultsPage = function (page = state.search.page) {
  // Adjust page buttons to a "start at 1" type of count
  // RES_PER_PAGE is set to 10 in our config file
  state.search.page = page;
  // save page number in our state obj
  const start = (page - 1) * _configJs.RES_PER_PAGE;
  const end = page * _configJs.RES_PER_PAGE;
  return state.search.results.slice(start, end);
};
