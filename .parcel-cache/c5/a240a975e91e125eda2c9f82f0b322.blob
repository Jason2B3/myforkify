var _modelJs = require('./model.js');
var _viewsRecipeViewJs = require('./views/recipeView.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _viewsRecipeViewJsDefault = _parcelHelpers.interopDefault(_viewsRecipeViewJs);
var _viewsSearchViewJs = require('./views/searchView.js');
var _viewsResultsViewJs = require('./views/resultsView.js');
var _viewsResultsViewJsDefault = _parcelHelpers.interopDefault(_viewsResultsViewJs);
require('core-js/stable');
require('regenerator-runtime/runtime');
// default NPM imports
if (module.hot) module.hot.accept();
// "enables polyfills for async JS"
// —————————————————————【 END OF IMPORTS ZONE 】——————————————————————————
const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
};
// https://forkify-api.herokuapp.com/v2
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    console.log();
    if (!id) return;
    // guard clause if we have no ID
    _viewsRecipeViewJsDefault.default.renderSpinner();
    // @  Load the recipe (async F which returns a promise)
    // the below function returns nothing, so it needs no variable. just changes the state object
    // it IS async, which returns a promise- so we need await to halt our ƒ()'s execution
    await _modelJs.loadRecipe(id);
    // @  Render the recipe
    _viewsRecipeViewJsDefault.default.render(_modelJs.state.recipe);
  } catch (err) {
    // @ ERROR HANDLING PART 2
    // We use functions from view to render the visuals to convey an error
    // However, we call those render functions in controller (as MVC encourages)
    _viewsRecipeViewJsDefault.default.renderError();
  }
};
const controlSearchResults = async function () {
  try {
    // 0) Render Spinner while we wait for real stuff to happen
    _viewsResultsViewJsDefault.default.renderSpinner();
    // 1) Get search query and clear input field
    const sq = _viewsSearchViewJs.default.getQuery();
    // grab search field text
    if (!sq) return;
    // guard clause in case we search nothing
    // 2) Load search results
    await _modelJs.loadSearchResults(sq);
    // load search results
    console.log(_modelJs.state.search);
    // 3) Render results
    _viewsResultsViewJsDefault.default.render(_modelJs.state.search.results);
  } catch (err) {
    _viewsResultsViewJsDefault.default.renderError(_modelJs.state.search.results);
  }
};
// % MVC Version of PubSub PART 1 and 2
const init = function () {
  _viewsRecipeViewJsDefault.default.addHandlerRender(controlRecipes);
  // #PART 1
  _viewsSearchViewJs.default.addHandlerSearch(controlSearchResults);
};
init();
