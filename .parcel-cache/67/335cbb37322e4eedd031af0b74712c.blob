var _modelJs = require('./model.js');
var _viewsRecipeViewJs = require('./views/recipeView.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _viewsRecipeViewJsDefault = _parcelHelpers.interopDefault(_viewsRecipeViewJs);
var _viewsSearchViewJs = require('./views/searchView.js');
var _viewsResultsViewJs = require('./views/resultsView.js');
var _viewsResultsViewJsDefault = _parcelHelpers.interopDefault(_viewsResultsViewJs);
var _viewsPaginationViewJs = require('./views/paginationView.js');
var _viewsPaginationViewJsDefault = _parcelHelpers.interopDefault(_viewsPaginationViewJs);
var _viewsBookmarksViewJs = require('./views/bookmarksView.js');
var _viewsBookmarksViewJsDefault = _parcelHelpers.interopDefault(_viewsBookmarksViewJs);
require('core-js/stable');
require('regenerator-runtime/runtime');
var _viewsResultsViewJsDefault = _parcelHelpers.interopDefault(_viewsResultsViewJs);
// default NPM imports
if (module.hot) module.hot.accept();
// —————————————————————【 END OF IMPORTS ZONE 】——————————————————————————
const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
};
// https://forkify-api.herokuapp.com/v2
// @ CONTROLLER: Click on a listed recipe to load/render
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;
    // guard clause if we have no ID
    _viewsRecipeViewJsDefault.default.renderSpinner();
    // 0) Update results view to keep the selected search result highlighted/shaded
    _viewsResultsViewJsDefault.default.update(_modelJs.getSearchResultsPage());
    // 1)  Load the recipe (async F which returns a promise)
    await _modelJs.loadRecipe(id);
    // the below function returns nothing, so it needs no variable. just changes the state object
    // it IS async, which returns a promise- so we need await to halt our ƒ()'s execution
    // 2)  Render the recipe
    _viewsRecipeViewJsDefault.default.render(_modelJs.state.recipe);
  } catch (err) {
    // # ERROR HANDLING PART 2/3
    // We use functions from view to render the visuals to convey an error
    // However, we call those render functions in controller (as MVC encourages)
    _viewsRecipeViewJsDefault.default.renderError();
  }
};
// @ CONTROLLER: Using the searchbar
const controlSearchResults = async function () {
  try {
    // 0) Render Spinner while we wait for real stuff to happen
    _viewsResultsViewJsDefault.default.renderSpinner();
    // 1) Get search query and clear input field
    const sq = _viewsSearchViewJs.default.getQuery();
    // grab search field text
    if (!sq) return;
    // guard clause in case we search nothing
    // 2) Load search results
    await _modelJs.loadSearchResults(sq);
    // load search results
    // 3) Render results
    _viewsResultsViewJsDefault.default.render(_modelJs.getSearchResultsPage());
    // 4) Render initial pagination buttons
    _viewsPaginationViewJsDefault.default.render(_modelJs.state.search);
  } catch (err) {
    _viewsResultsViewJsDefault.default.renderError(_modelJs.state.search.results);
  }
};
// @ CONTROLLER: Pressing a pagination button to go forward or backward
const controlPagination = function (goToPage) {
  // 1) Render NEW results
  _viewsResultsViewJsDefault.default.render(_modelJs.getSearchResultsPage(goToPage));
  // 2) Render NEW pagination buttons
  _viewsPaginationViewJsDefault.default.render(_modelJs.state.search);
};
const controlAddBookmark = function () {
  // 1a) If a recipe IS NOT bookmarked yet, bookmark it
  if (!_modelJs.state.recipe.bookmarked) {
    _modelJs.addBookmark(_modelJs.state.recipe);
    // 1b) Update recipeView
    _viewsRecipeViewJsDefault.default.update(_modelJs.state.recipe);
    // 1c) Give bookmark data to the bookMarksView Module
    _viewsBookmarksViewJsDefault.default._dataTransfer(_modelJs.state.bookmarks, _modelJs.state.bookmarksID);
    return;
  }
  // 2a) If a recipe IS bookmarked, remove it
  if (_modelJs.state.recipe.bookmarked) {
    _modelJs.deleteBookmark(_modelJs.state.recipe);
    // 2b) update recipeView
    _viewsRecipeViewJsDefault.default.update(_modelJs.state.recipe);
    // 2c) Give bookmark data to the bookMarksView Module
    _viewsBookmarksViewJsDefault.default._dataTransfer(_modelJs.state.bookmarks, _modelJs.state.bookmarksID);
    return;
  }
};
const controlHoverBookmark = function () {
  // List all the bookmarked recipe previews, but only when hovering
  _viewsBookmarksViewJsDefault.default.render(_modelJs.state);
};
// @ This is the MVC Version of Pub-Sub
const init = function () {
  _viewsRecipeViewJsDefault.default.addHandlerRender(controlRecipes);
  _viewsSearchViewJs.default.addHandlerSearch(controlSearchResults);
  _viewsPaginationViewJsDefault.default.addHandlerClick(controlPagination);
  _viewsRecipeViewJsDefault.default.addHandlerBookmark(controlAddBookmark);
  _viewsBookmarksViewJsDefault.default.addHandlerPreview(controlHoverBookmark);
};
init();
