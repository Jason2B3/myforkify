var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "numero", function () {
  return numero;
});
var _modelJs = require('./model.js');
var _viewsRecipeViewJs = require('./views/recipeView.js');
var _viewsRecipeViewJsDefault = _parcelHelpers.interopDefault(_viewsRecipeViewJs);
require('core-js/stable');
require('regenerator-runtime/runtime');
// default NPM imports
if (module.hot) module.hot.accept();
// "enables polyfills for async JS"
// —————————————————————【 END OF IMPORTS ZONE 】——————————————————————————
const recipeContainer = document.querySelector('.recipe');
const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
};
// https://forkify-api.herokuapp.com/v2
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;
    // guard clause if we have no ID
    _viewsRecipeViewJsDefault.default.renderSpinner();
    // @  Load the recipe (async F which returns a promise)
    // the below function returns nothing, so it needs no variable. just changes the state object
    // it IS async, which returns a promise- so we need await to halt our ƒ()'s execution
    await _modelJs.loadRecipe(id);
    // @  Render the recipe
    _viewsRecipeViewJsDefault.default.render(_modelJs.state.recipe);
  } catch (err) {
    console.error(err);
  }
};
window.addEventListener('hashchange', controlRecipes);
window.addEventListener('load', controlRecipes);
let numero = 9;
