var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _urlImgIconsSvg = require('url:../../img/icons.svg');
var _urlImgIconsSvgDefault = _parcelHelpers.interopDefault(_urlImgIconsSvg);
var _ViewJs = require('./View.js');
var _ViewJsDefault = _parcelHelpers.interopDefault(_ViewJs);
class paginationView extends _ViewJsDefault.default {
  _parentElement = document.querySelector('.pagination');
  _data;
  _generateMarkup() {
    const numPages = Math.ceil(this._data.results.length / this._data.resultsPerPage);
    const currentPage = this._data.page;
    // Page 1, there are other pages
    if (currentPage === 1 && numPages > 1) {
      return `<button data-goto=""class="btn--inline pagination__btn--next">
      <span>Page ${currentPage + 1}</span>
      <svg class="search__icon">
        <use href="${_urlImgIconsSvgDefault.default}#icon-arrow-right"></use>
      </svg>
    </button>`;
    }
    // Last Page
    if (currentPage === numPages && numPages > 1) {
      return `<button class="btn--inline pagination__btn--prev">
      <svg class="search__icon">
        <use href="${_urlImgIconsSvgDefault.default}#icon-arrow-left"></use>
      </svg>
      <span>Page ${currentPage - 1}</span>
    </button>`;
      ;
    }
    // Page in between 2 others
    if (currentPage < numPages) {
      return `<button class="btn--inline pagination__btn--prev">
      <svg class="search__icon">
        <use href="${_urlImgIconsSvgDefault.default}#icon-arrow-left"></use>
      </svg>
      <span>Page ${currentPage - 1}</span>
    </button>
    <button class="btn--inline pagination__btn--next">
      <span>Page ${currentPage + 1}</span>
      <svg class="search__icon">
        <use href="${_urlImgIconsSvgDefault.default}#icon-arrow-right"></use>
      </svg>
    </button>`;
    }
    // Page 1, with NO other pages
    return "";
  }
  addHandlerClick(handler) {
    this._parentElement.addEventListener('click', function (e) {
      const nearestBtn = e.target.closest('.btn--inline');
      console.log(nearestBtn);
    });
  }
}
exports.default = new paginationView();
